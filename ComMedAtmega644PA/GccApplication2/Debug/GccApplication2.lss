
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000002fc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d68  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000474  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000444  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ba  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000269a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ef       	ldi	r30, 0xFC	; 252
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 32       	cpi	r26, 0x28	; 40
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 81 00 	call	0x102	; 0x102 <main>
  a2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <swrite>:




void swrite(uint8_t byte) {
	while (!( UCSR0A & (1<<UDRE0) ));
  aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
  ae:	95 ff       	sbrs	r25, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <swrite>
	UDR0 = byte;
  b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
  b6:	08 95       	ret

000000b8 <sread>:
}

uint8_t sread(){
	while (!( UCSR0A & (1<<RXC0) ));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
  bc:	88 23       	and	r24, r24
  be:	e4 f7       	brge	.-8      	; 0xb8 <sread>
	return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
}
  c4:	08 95       	ret

000000c6 <WriteMessage>:
		
		
	}
}

void WriteMessage(char* sendthis){
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	8c 01       	movw	r16, r24
	
	for (int i = 0; i < strlen(sendthis); i++){
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <WriteMessage+0x1e>
		swrite(sendthis[i]);
  d6:	f8 01       	movw	r30, r16
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	80 81       	ld	r24, Z
  de:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
	}
}

void WriteMessage(char* sendthis){
	
	for (int i = 0; i < strlen(sendthis); i++){
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	f8 01       	movw	r30, r16
  e6:	01 90       	ld	r0, Z+
  e8:	00 20       	and	r0, r0
  ea:	e9 f7       	brne	.-6      	; 0xe6 <WriteMessage+0x20>
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	e0 1b       	sub	r30, r16
  f0:	f1 0b       	sbc	r31, r17
  f2:	ce 17       	cp	r28, r30
  f4:	df 07       	cpc	r29, r31
  f6:	78 f3       	brcs	.-34     	; 0xd6 <WriteMessage+0x10>
		swrite(sendthis[i]);
	}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <main>:
	while (!( UCSR0A & (1<<RXC0) ));
	return UDR0;
}

int main(void)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	a8 97       	sbiw	r28, 0x28	; 40
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61

	UBRR0L = 51;                         // UBBR = Freq / (16 * (BaudRate)) – 1
 116:	83 e3       	ldi	r24, 0x33	; 51
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Enable reading and writing
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f00c1>

	char Besked[40] = "Aksel is Stalin";
 122:	90 e1       	ldi	r25, 0x10	; 16
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	9a 95       	dec	r25
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x2a>
 134:	fe 01       	movw	r30, r28
 136:	71 96       	adiw	r30, 0x11	; 17
 138:	df 01       	movw	r26, r30
 13a:	1d 92       	st	X+, r1
 13c:	8a 95       	dec	r24
 13e:	e9 f7       	brne	.-6      	; 0x13a <main+0x38>

	while (1) {
		
		
		char ReceivedMessage[1];
		ReceivedMessage[0] = sread();
 140:	0e 94 5c 00 	call	0xb8	; 0xb8 <sread>
 144:	18 2f       	mov	r17, r24
		
		if (ReceivedMessage[0] == 's')
 146:	83 37       	cpi	r24, 0x73	; 115
 148:	29 f4       	brne	.+10     	; 0x154 <main+0x52>
		{
			swrite(ReceivedMessage[0]);
 14a:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>

		}
		
		if (ReceivedMessage[0] == '0')
 154:	10 33       	cpi	r17, 0x30	; 48
 156:	91 f4       	brne	.+36     	; 0x17c <main+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	bf ef       	ldi	r27, 0xFF	; 255
 15a:	29 e6       	ldi	r18, 0x69	; 105
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	b1 50       	subi	r27, 0x01	; 1
 160:	20 40       	sbci	r18, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x5c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x66>
 168:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 16a:	80 e7       	ldi	r24, 0x70	; 112
 16c:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 170:	81 2f       	mov	r24, r17
 172:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		if (ReceivedMessage[0] == '1')
 17c:	11 33       	cpi	r17, 0x31	; 49
 17e:	91 f4       	brne	.+36     	; 0x1a4 <main+0xa2>
 180:	9f ef       	ldi	r25, 0xFF	; 255
 182:	a9 e6       	ldi	r26, 0x69	; 105
 184:	b8 e1       	ldi	r27, 0x18	; 24
 186:	91 50       	subi	r25, 0x01	; 1
 188:	a0 40       	sbci	r26, 0x00	; 0
 18a:	b0 40       	sbci	r27, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x84>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x8e>
 190:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 198:	81 2f       	mov	r24, r17
 19a:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>

		}
		if (ReceivedMessage[0] == '2')
 1a4:	12 33       	cpi	r17, 0x32	; 50
 1a6:	91 f4       	brne	.+36     	; 0x1cc <main+0xca>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0xac>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xb6>
 1b8:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 1ba:	80 e7       	ldi	r24, 0x70	; 112
 1bc:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			
		}
		if (ReceivedMessage[0] == '3')
 1cc:	13 33       	cpi	r17, 0x33	; 51
 1ce:	d1 f4       	brne	.+52     	; 0x204 <main+0x102>
 1d0:	af ef       	ldi	r26, 0xFF	; 255
 1d2:	b9 e6       	ldi	r27, 0x69	; 105
 1d4:	28 e1       	ldi	r18, 0x18	; 24
 1d6:	a1 50       	subi	r26, 0x01	; 1
 1d8:	b0 40       	sbci	r27, 0x00	; 0
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0xd4>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0xde>
 1e0:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 1e2:	80 e7       	ldi	r24, 0x70	; 112
 1e4:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			WriteMessage(Besked);
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	0e 94 63 00 	call	0xc6	; 0xc6 <WriteMessage>
			WriteMessage(' ');
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 63 00 	call	0xc6	; 0xc6 <WriteMessage>
			swrite(ReceivedMessage[0]);
 1f8:	81 2f       	mov	r24, r17
 1fa:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>

		}
		if (ReceivedMessage[0] == '4')
 204:	14 33       	cpi	r17, 0x34	; 52
 206:	91 f4       	brne	.+36     	; 0x22c <main+0x12a>
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	99 e6       	ldi	r25, 0x69	; 105
 20c:	a8 e1       	ldi	r26, 0x18	; 24
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	a0 40       	sbci	r26, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x10c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x116>
 218:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 21a:	80 e7       	ldi	r24, 0x70	; 112
 21c:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 220:	81 2f       	mov	r24, r17
 222:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		if (ReceivedMessage[0] == '5')
 22c:	15 33       	cpi	r17, 0x35	; 53
 22e:	91 f4       	brne	.+36     	; 0x254 <main+0x152>
 230:	bf ef       	ldi	r27, 0xFF	; 255
 232:	29 e6       	ldi	r18, 0x69	; 105
 234:	88 e1       	ldi	r24, 0x18	; 24
 236:	b1 50       	subi	r27, 0x01	; 1
 238:	20 40       	sbci	r18, 0x00	; 0
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x134>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x13e>
 240:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 242:	80 e7       	ldi	r24, 0x70	; 112
 244:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 248:	81 2f       	mov	r24, r17
 24a:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		if (ReceivedMessage[0] == '6')
 254:	16 33       	cpi	r17, 0x36	; 54
 256:	91 f4       	brne	.+36     	; 0x27c <main+0x17a>
 258:	9f ef       	ldi	r25, 0xFF	; 255
 25a:	a9 e6       	ldi	r26, 0x69	; 105
 25c:	b8 e1       	ldi	r27, 0x18	; 24
 25e:	91 50       	subi	r25, 0x01	; 1
 260:	a0 40       	sbci	r26, 0x00	; 0
 262:	b0 40       	sbci	r27, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x15c>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x166>
 268:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 270:	81 2f       	mov	r24, r17
 272:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		if (ReceivedMessage[0] == '7')
 27c:	17 33       	cpi	r17, 0x37	; 55
 27e:	91 f4       	brne	.+36     	; 0x2a4 <main+0x1a2>
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	89 e6       	ldi	r24, 0x69	; 105
 284:	98 e1       	ldi	r25, 0x18	; 24
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x184>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x18e>
 290:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 292:	80 e7       	ldi	r24, 0x70	; 112
 294:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 298:	81 2f       	mov	r24, r17
 29a:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 29e:	8a e0       	ldi	r24, 0x0A	; 10
 2a0:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		if (ReceivedMessage[0] == '8')
 2a4:	18 33       	cpi	r17, 0x38	; 56
 2a6:	91 f4       	brne	.+36     	; 0x2cc <main+0x1ca>
 2a8:	af ef       	ldi	r26, 0xFF	; 255
 2aa:	b9 e6       	ldi	r27, 0x69	; 105
 2ac:	28 e1       	ldi	r18, 0x18	; 24
 2ae:	a1 50       	subi	r26, 0x01	; 1
 2b0:	b0 40       	sbci	r27, 0x00	; 0
 2b2:	20 40       	sbci	r18, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x1ac>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x1b6>
 2b8:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 2ba:	80 e7       	ldi	r24, 0x70	; 112
 2bc:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 2c0:	81 2f       	mov	r24, r17
 2c2:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		if (ReceivedMessage[0] == '9')
 2cc:	19 33       	cpi	r17, 0x39	; 57
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <main+0x1d0>
 2d0:	37 cf       	rjmp	.-402    	; 0x140 <main+0x3e>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	99 e6       	ldi	r25, 0x69	; 105
 2d6:	a8 e1       	ldi	r26, 0x18	; 24
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	a0 40       	sbci	r26, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0x1d6>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x1e0>
 2e2:	00 00       	nop
		{
			_delay_ms(1000);
			swrite('p');
 2e4:	80 e7       	ldi	r24, 0x70	; 112
 2e6:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite(ReceivedMessage[0]);
 2ea:	81 2f       	mov	r24, r17
 2ec:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
			swrite('\n');
 2f0:	8a e0       	ldi	r24, 0x0A	; 10
 2f2:	0e 94 55 00 	call	0xaa	; 0xaa <swrite>
		}
		
		
	}
 2f6:	24 cf       	rjmp	.-440    	; 0x140 <main+0x3e>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
