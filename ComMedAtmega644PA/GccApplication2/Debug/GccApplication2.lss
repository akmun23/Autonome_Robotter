
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000986  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <swrite>:
void PWM75();
void PWM50();
void PWM25();*/

void swrite(uint8_t byte) {
	while (!( UCSR1A & (1<<UDRE1) ));
  94:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f00c8>
  98:	95 ff       	sbrs	r25, 5
  9a:	fc cf       	rjmp	.-8      	; 0x94 <swrite>
	UDR1 = byte;
  9c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
  a0:	08 95       	ret

000000a2 <sread>:
}

uint8_t sread(){
	while (!( UCSR1A & (1<<RXC1) ));
  a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f00c8>
  a6:	88 23       	and	r24, r24
  a8:	e4 f7       	brge	.-8      	; 0xa2 <sread>
	return UDR1;
  aa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
}
  ae:	08 95       	ret

000000b0 <main>:

int main(void)
{

	// UBRR1L = 103;
	UBRR1L = 119;                         // UBBR = Freq / (16 * (BaudRate)) – 1
  b0:	87 e7       	ldi	r24, 0x77	; 119
  b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);  // Enable reading and writing
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>

	while (1) {
		
		
		char ReceivedMessage[1];
		ReceivedMessage[0] = sread();
  bc:	0e 94 51 00 	call	0xa2	; 0xa2 <sread>
  c0:	c8 2f       	mov	r28, r24
  c2:	d8 2f       	mov	r29, r24
		
		if (ReceivedMessage[0] == 's')
  c4:	83 37       	cpi	r24, 0x73	; 115
  c6:	11 f4       	brne	.+4      	; 0xcc <main+0x1c>
		{
			swrite(ReceivedMessage[0]);
  c8:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>

		}
		
		if (ReceivedMessage[0] == '0')
  cc:	c0 33       	cpi	r28, 0x30	; 48
  ce:	19 f4       	brne	.+6      	; 0xd6 <main+0x26>
		{
			//Timer250us();
			swrite(ReceivedMessage[0]);
  d0:	8c 2f       	mov	r24, r28
  d2:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		if (ReceivedMessage[0] == '1')
  d6:	c1 33       	cpi	r28, 0x31	; 49
  d8:	31 f4       	brne	.+12     	; 0xe6 <main+0x36>
		{
			
			DDRD = 0b00100000; 
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
			PORTD = 0b00100000;
  de:	8b b9       	out	0x0b, r24	; 11
			swrite(ReceivedMessage[0]);
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>

		}
		if (ReceivedMessage[0] == '2')
  e6:	d2 33       	cpi	r29, 0x32	; 50
  e8:	29 f4       	brne	.+10     	; 0xf4 <main+0x44>
		{
			DDRD = 0b00000000;
  ea:	1a b8       	out	0x0a, r1	; 10
			PORTD = 0b00000000;
  ec:	1b b8       	out	0x0b, r1	; 11
			swrite(ReceivedMessage[0]);
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
			
		}
		if (ReceivedMessage[0] == '3')
  f4:	d3 33       	cpi	r29, 0x33	; 51
  f6:	31 f4       	brne	.+12     	; 0x104 <main+0x54>
		{
			//PWM100();
			DDRD = 0b00010000;
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	8a b9       	out	0x0a, r24	; 10
			PORTD = 0b00010000;
  fc:	8b b9       	out	0x0b, r24	; 11
			swrite(ReceivedMessage[0]);
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>

		}
		if (ReceivedMessage[0] == '4')
 104:	d4 33       	cpi	r29, 0x34	; 52
 106:	29 f4       	brne	.+10     	; 0x112 <main+0x62>
		{
			//PWM75();
			DDRD = 0b00000000;
 108:	1a b8       	out	0x0a, r1	; 10
			PORTD = 0b00000000;
 10a:	1b b8       	out	0x0b, r1	; 11
			swrite(ReceivedMessage[0]);
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		if (ReceivedMessage[0] == '5')
 112:	dc 2f       	mov	r29, r28
 114:	c5 33       	cpi	r28, 0x35	; 53
 116:	19 f4       	brne	.+6      	; 0x11e <main+0x6e>
		{
			//PWM50();
			swrite(ReceivedMessage[0]);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		if (ReceivedMessage[0] == '6')
 11e:	d6 33       	cpi	r29, 0x36	; 54
 120:	19 f4       	brne	.+6      	; 0x128 <main+0x78>
		{
			//PWM25();
			swrite(ReceivedMessage[0]);
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		if (ReceivedMessage[0] == '7')
 128:	d7 33       	cpi	r29, 0x37	; 55
 12a:	19 f4       	brne	.+6      	; 0x132 <main+0x82>
		{
			//PWM(50,100)
			swrite(ReceivedMessage[0]);
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		if (ReceivedMessage[0] == '8')
 132:	d8 33       	cpi	r29, 0x38	; 56
 134:	19 f4       	brne	.+6      	; 0x13c <main+0x8c>
		{
			//PWM(100,50);
			swrite(ReceivedMessage[0]);
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		if (ReceivedMessage[0] == '9')
 13c:	d9 33       	cpi	r29, 0x39	; 57
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0x92>
 140:	bd cf       	rjmp	.-134    	; 0xbc <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	3f eb       	ldi	r19, 0xBF	; 191
 146:	84 ed       	ldi	r24, 0xD4	; 212
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	30 40       	sbci	r19, 0x00	; 0
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	d9 f7       	brne	.-10     	; 0x14a <main+0x9a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xa6>
 156:	00 00       	nop
		{
			_delay_ms(1000);
			swrite(ReceivedMessage[0]);
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 4a 00 	call	0x94	; 0x94 <swrite>
		}
		
		
	}
 15e:	ae cf       	rjmp	.-164    	; 0xbc <main+0xc>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
