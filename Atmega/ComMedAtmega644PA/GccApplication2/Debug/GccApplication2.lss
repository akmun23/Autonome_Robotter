
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af3  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bc  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000237  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000025c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ea       	ldi	r30, 0xAC	; 172
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 30       	cpi	r26, 0x05	; 5
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  b2:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <swrite>:
void WriteMessage(char* sendthis){
	
	for (int i = 0; i < strlen(sendthis); i++){		// Tager en større mængde tal/bogstaver og sender dem 1 af gangen 
		swrite(sendthis[i]);						// Benytter write komandoen
	}
}
  ba:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f00c8>
  be:	95 ff       	sbrs	r25, 5
  c0:	fc cf       	rjmp	.-8      	; 0xba <swrite>
  c2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
  c6:	08 95       	ret

000000c8 <sread>:
  c8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f00c8>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <sread>
  d0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
  d4:	08 95       	ret

000000d6 <InitPWMandADC>:




void InitPWMandADC(){
	DDRD = (1 << PORTD4);									// Åbner for at der kan komme strøm ud af porten til PWM 
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	8a b9       	out	0x0a, r24	; 10
	
	
	TCCR1A = (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);	// Sætter mode til PWM, Phase Correct, 10-bit måske slet WGM11 så bliver det til 8bit
  da:	83 e2       	ldi	r24, 0x23	; 35
  dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TIMSK1 = (1 << TOIE1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
			
	sei();													// Sætter interupten til PWM
  e6:	78 94       	sei
	
	TCCR1B = (1 << CS10);									// starter timeren
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	MUX3 = 0     use PC1/ADC1 for input
	MUX2 = 0
	MUX1 = 0
	MUX0 = 1
	*/
	ADMUX = 0b01100001;
  ec:	81 e6       	ldi	r24, 0x61	; 97
  ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
	
	ADPS2 = 0
	ADPS1 = 1    MHz clock / 8 
	ADPS0 = 1
	*/
	ADCSRA = 0b10100011;
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	83 ea       	ldi	r24, 0xA3	; 163
  f8:	80 83       	st	Z, r24
	bit 3 = 0
	ADTS2 = 0
	ADTS1 = 0    free running mode
	ADTS0 = 0
	*/
	ADCSRB = 0b00000000;
  fa:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
	
	ADCSRA |= (1 << ADSC);		// start ADC
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <PWMStart>:
	
	
}

void PWMStart(){
	DDRD = 0b00010000;
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00010000;
 10a:	8b b9       	out	0x0b, r24	; 11
	dutyCycle = 1023;				// Full speed 16 bit
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 ec       	ldi	r25, 0xC0	; 192
 110:	af e7       	ldi	r26, 0x7F	; 127
 112:	b4 e4       	ldi	r27, 0x44	; 68
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 120:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	8f eb       	ldi	r24, 0xBF	; 191
 128:	98 ea       	ldi	r25, 0xA8	; 168
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <PWMStart+0x24>
 132:	00 c0       	rjmp	.+0      	; 0x134 <PWMStart+0x2e>
 134:	00 00       	nop
 136:	04 c0       	rjmp	.+8      	; 0x140 <PWMStart+0x3a>
	_delay_ms(300);
	while (!(ADCH < 114)) {			// Laver en evigt loop der venter på at strømmen bliver for stor også slutter den
		uint8_t Power = ADCH;
 138:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
		swrite(Power);
 13c:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
void PWMStart(){
	DDRD = 0b00010000;
	PORTD = 0b00010000;
	dutyCycle = 1023;				// Full speed 16 bit
	_delay_ms(300);
	while (!(ADCH < 114)) {			// Laver en evigt loop der venter på at strømmen bliver for stor også slutter den
 140:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 144:	82 37       	cpi	r24, 0x72	; 114
 146:	c0 f7       	brcc	.-16     	; 0x138 <PWMStart+0x32>
		uint8_t Power = ADCH;
		swrite(Power);
	}
	uint8_t Power = ADCH;
 148:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
	swrite(Power);
 14c:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
	dutyCycle = dutyCycle/2;			// half speed
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 168:	0e 94 bf 01 	call	0x37e	; 0x37e <__mulsf3>
 16c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 178:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	swrite('7');
 17c:	87 e3       	ldi	r24, 0x37	; 55
 17e:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
	stopcommand[0] = sread();
 182:	0e 94 64 00 	call	0xc8	; 0xc8 <sread>
 186:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	//while (stopcommand[0] != 8){
				// Venter på at den får sendt signal af robot der siger den er hvor der skal slippes
	//}
	
	PORTC = 0b00001000;				// Vender retningen på strømmen til motoren så den kører baglæns
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	88 b9       	out	0x08, r24	; 8
	DDRC = 0b00001000;
 18e:	87 b9       	out	0x07, r24	; 7
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	8f eb       	ldi	r24, 0xBF	; 191
 194:	98 ea       	ldi	r25, 0xA8	; 168
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <PWMStart+0x90>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <PWMStart+0x9a>
 1a0:	00 00       	nop
	_delay_ms(300);					// Find værdi her der passer med at den er åben
	//dutyCycle = 0;					// half speed
	DDRD = 0b00000000;
 1a2:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00000000;
 1a4:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0b00000000;				// Vender retningen til den anden vej igen og slukker motoren
 1a6:	18 b8       	out	0x08, r1	; 8
	DDRC = 0b00000000;
 1a8:	17 b8       	out	0x07, r1	; 7
 1aa:	08 95       	ret

000001ac <main>:
double dutyCycle = 1023;
char stopcommand[1];
int main(void)
{

	UBRR1L = 119;							// UBBR = Freq / (16 * (BaudRate))  1
 1ac:	87 e7       	ldi	r24, 0x77	; 119
 1ae:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);	// Tænder for reading og writing
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    InitPWMandADC();
 1b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <InitPWMandADC>
	DDRD = 0b00000000;
 1bc:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00000000;
 1be:	1b b8       	out	0x0b, r1	; 11

	while (1) {
		
		
		char ReceivedMessage[1];
		ReceivedMessage[0] = sread();		// Venter hele tiden på signal fra pc medmindre anden operation i koden er igang
 1c0:	0e 94 64 00 	call	0xc8	; 0xc8 <sread>
 1c4:	c8 2f       	mov	r28, r24
 1c6:	d8 2f       	mov	r29, r24
		
		if (ReceivedMessage[0] == 's')
 1c8:	83 37       	cpi	r24, 0x73	; 115
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <main+0x24>
		{
			swrite(ReceivedMessage[0]);
 1cc:	0e 94 5d 00 	call	0xba	; 0xba <swrite>

		}
		
		if (ReceivedMessage[0] == '0')
 1d0:	c0 33       	cpi	r28, 0x30	; 48
 1d2:	19 f4       	brne	.+6      	; 0x1da <main+0x2e>
		{
			//Timer250us();
			swrite(ReceivedMessage[0]);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		if (ReceivedMessage[0] == '1')
 1da:	c1 33       	cpi	r28, 0x31	; 49
 1dc:	31 f4       	brne	.+12     	; 0x1ea <main+0x3e>
		{
			
			DDRD = 0b00100000; 
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	8a b9       	out	0x0a, r24	; 10
			PORTD = 0b00100000;
 1e2:	8b b9       	out	0x0b, r24	; 11
			swrite(ReceivedMessage[0]);
 1e4:	8c 2f       	mov	r24, r28
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <swrite>

		}
		if (ReceivedMessage[0] == '2')
 1ea:	d2 33       	cpi	r29, 0x32	; 50
 1ec:	29 f4       	brne	.+10     	; 0x1f8 <main+0x4c>
		{
			DDRD = 0b00000000;
 1ee:	1a b8       	out	0x0a, r1	; 10
			PORTD = 0b00000000;
 1f0:	1b b8       	out	0x0b, r1	; 11
			swrite(ReceivedMessage[0]);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
			
		}
		if (ReceivedMessage[0] == '3')
 1f8:	d3 33       	cpi	r29, 0x33	; 51
 1fa:	31 f4       	brne	.+12     	; 0x208 <main+0x5c>
		{
			//PWM100();
			DDRD = 0b00010000;
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
			PORTD = 0b00010000;
 200:	8b b9       	out	0x0b, r24	; 11
			swrite(ReceivedMessage[0]);
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 5d 00 	call	0xba	; 0xba <swrite>

		}
		if (ReceivedMessage[0] == '4')
 208:	d4 33       	cpi	r29, 0x34	; 52
 20a:	29 f4       	brne	.+10     	; 0x216 <main+0x6a>
		{
			//PWM75();
			DDRD = 0b00000000;
 20c:	1a b8       	out	0x0a, r1	; 10
			PORTD = 0b00000000;
 20e:	1b b8       	out	0x0b, r1	; 11
			swrite(ReceivedMessage[0]);
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		if (ReceivedMessage[0] == '5')
 216:	dc 2f       	mov	r29, r28
 218:	c5 33       	cpi	r28, 0x35	; 53
 21a:	19 f4       	brne	.+6      	; 0x222 <main+0x76>
		{
			swrite(ReceivedMessage[0]);
 21c:	8c 2f       	mov	r24, r28
 21e:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		if (ReceivedMessage[0] == '6')
 222:	d6 33       	cpi	r29, 0x36	; 54
 224:	29 f4       	brne	.+10     	; 0x230 <main+0x84>
		{
			PWMStart();
 226:	0e 94 83 00 	call	0x106	; 0x106 <PWMStart>
			swrite(ReceivedMessage[0]);
 22a:	8c 2f       	mov	r24, r28
 22c:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		if (ReceivedMessage[0] == '7')
 230:	d7 33       	cpi	r29, 0x37	; 55
 232:	31 f4       	brne	.+12     	; 0x240 <main+0x94>
		{
			swrite(2 + '0');
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
			//PWM(50,100)
			swrite(ReceivedMessage[0]);
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		if (ReceivedMessage[0] == '8')
 240:	d8 33       	cpi	r29, 0x38	; 56
 242:	19 f4       	brne	.+6      	; 0x24a <main+0x9e>
		{
			//PWM(100,50);
			swrite(ReceivedMessage[0]);
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		if (ReceivedMessage[0] == '9')
 24a:	d9 33       	cpi	r29, 0x39	; 57
 24c:	09 f0       	breq	.+2      	; 0x250 <main+0xa4>
 24e:	b8 cf       	rjmp	.-144    	; 0x1c0 <main+0x14>
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	3f eb       	ldi	r19, 0xBF	; 191
 254:	84 ed       	ldi	r24, 0xD4	; 212
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	d9 f7       	brne	.-10     	; 0x258 <main+0xac>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0xb8>
 264:	00 00       	nop
		{
			_delay_ms(1000);
			swrite(ReceivedMessage[0]);
 266:	8c 2f       	mov	r24, r28
 268:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		
		
	}
 26c:	a9 cf       	rjmp	.-174    	; 0x1c0 <main+0x14>

0000026e <__vector_15>:
	DDRC = 0b00000000;
	
}


ISR(TIMER1_OVF_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	
	OCR1B = dutyCycle;				// Styrer hvor hurtigt den skal interupt alt efter hvor høj dutycyle er
 290:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 294:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 298:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 29c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <__fixunssfsi>
 2a4:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f008b>
 2a8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f008a>

}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__fixunssfsi>:
 2ce:	0e 94 9e 01 	call	0x33c	; 0x33c <__fp_splitA>
 2d2:	88 f0       	brcs	.+34     	; 0x2f6 <__fixunssfsi+0x28>
 2d4:	9f 57       	subi	r25, 0x7F	; 127
 2d6:	98 f0       	brcs	.+38     	; 0x2fe <__fixunssfsi+0x30>
 2d8:	b9 2f       	mov	r27, r25
 2da:	99 27       	eor	r25, r25
 2dc:	b7 51       	subi	r27, 0x17	; 23
 2de:	b0 f0       	brcs	.+44     	; 0x30c <__fixunssfsi+0x3e>
 2e0:	e1 f0       	breq	.+56     	; 0x31a <__fixunssfsi+0x4c>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	88 1f       	adc	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	1a f0       	brmi	.+6      	; 0x2f2 <__fixunssfsi+0x24>
 2ec:	ba 95       	dec	r27
 2ee:	c9 f7       	brne	.-14     	; 0x2e2 <__fixunssfsi+0x14>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <__fixunssfsi+0x4c>
 2f2:	b1 30       	cpi	r27, 0x01	; 1
 2f4:	91 f0       	breq	.+36     	; 0x31a <__fixunssfsi+0x4c>
 2f6:	0e 94 b8 01 	call	0x370	; 0x370 <__fp_zero>
 2fa:	b1 e0       	ldi	r27, 0x01	; 1
 2fc:	08 95       	ret
 2fe:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_zero>
 302:	67 2f       	mov	r22, r23
 304:	78 2f       	mov	r23, r24
 306:	88 27       	eor	r24, r24
 308:	b8 5f       	subi	r27, 0xF8	; 248
 30a:	39 f0       	breq	.+14     	; 0x31a <__fixunssfsi+0x4c>
 30c:	b9 3f       	cpi	r27, 0xF9	; 249
 30e:	cc f3       	brlt	.-14     	; 0x302 <__fixunssfsi+0x34>
 310:	86 95       	lsr	r24
 312:	77 95       	ror	r23
 314:	67 95       	ror	r22
 316:	b3 95       	inc	r27
 318:	d9 f7       	brne	.-10     	; 0x310 <__fixunssfsi+0x42>
 31a:	3e f4       	brtc	.+14     	; 0x32a <__fixunssfsi+0x5c>
 31c:	90 95       	com	r25
 31e:	80 95       	com	r24
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	08 95       	ret

0000032c <__fp_split3>:
 32c:	57 fd       	sbrc	r21, 7
 32e:	90 58       	subi	r25, 0x80	; 128
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	59 f0       	breq	.+22     	; 0x34c <__fp_splitA+0x10>
 336:	5f 3f       	cpi	r21, 0xFF	; 255
 338:	71 f0       	breq	.+28     	; 0x356 <__fp_splitA+0x1a>
 33a:	47 95       	ror	r20

0000033c <__fp_splitA>:
 33c:	88 0f       	add	r24, r24
 33e:	97 fb       	bst	r25, 7
 340:	99 1f       	adc	r25, r25
 342:	61 f0       	breq	.+24     	; 0x35c <__fp_splitA+0x20>
 344:	9f 3f       	cpi	r25, 0xFF	; 255
 346:	79 f0       	breq	.+30     	; 0x366 <__fp_splitA+0x2a>
 348:	87 95       	ror	r24
 34a:	08 95       	ret
 34c:	12 16       	cp	r1, r18
 34e:	13 06       	cpc	r1, r19
 350:	14 06       	cpc	r1, r20
 352:	55 1f       	adc	r21, r21
 354:	f2 cf       	rjmp	.-28     	; 0x33a <__fp_split3+0xe>
 356:	46 95       	lsr	r20
 358:	f1 df       	rcall	.-30     	; 0x33c <__fp_splitA>
 35a:	08 c0       	rjmp	.+16     	; 0x36c <__fp_splitA+0x30>
 35c:	16 16       	cp	r1, r22
 35e:	17 06       	cpc	r1, r23
 360:	18 06       	cpc	r1, r24
 362:	99 1f       	adc	r25, r25
 364:	f1 cf       	rjmp	.-30     	; 0x348 <__fp_splitA+0xc>
 366:	86 95       	lsr	r24
 368:	71 05       	cpc	r23, r1
 36a:	61 05       	cpc	r22, r1
 36c:	08 94       	sec
 36e:	08 95       	ret

00000370 <__fp_zero>:
 370:	e8 94       	clt

00000372 <__fp_szero>:
 372:	bb 27       	eor	r27, r27
 374:	66 27       	eor	r22, r22
 376:	77 27       	eor	r23, r23
 378:	cb 01       	movw	r24, r22
 37a:	97 f9       	bld	r25, 7
 37c:	08 95       	ret

0000037e <__mulsf3>:
 37e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__mulsf3x>
 382:	0c 94 43 02 	jmp	0x486	; 0x486 <__fp_round>
 386:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_pscA>
 38a:	38 f0       	brcs	.+14     	; 0x39a <__mulsf3+0x1c>
 38c:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_pscB>
 390:	20 f0       	brcs	.+8      	; 0x39a <__mulsf3+0x1c>
 392:	95 23       	and	r25, r21
 394:	11 f0       	breq	.+4      	; 0x39a <__mulsf3+0x1c>
 396:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_inf>
 39a:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_nan>
 39e:	11 24       	eor	r1, r1
 3a0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_szero>

000003a4 <__mulsf3x>:
 3a4:	0e 94 96 01 	call	0x32c	; 0x32c <__fp_split3>
 3a8:	70 f3       	brcs	.-36     	; 0x386 <__mulsf3+0x8>

000003aa <__mulsf3_pse>:
 3aa:	95 9f       	mul	r25, r21
 3ac:	c1 f3       	breq	.-16     	; 0x39e <__mulsf3+0x20>
 3ae:	95 0f       	add	r25, r21
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	55 1f       	adc	r21, r21
 3b4:	62 9f       	mul	r22, r18
 3b6:	f0 01       	movw	r30, r0
 3b8:	72 9f       	mul	r23, r18
 3ba:	bb 27       	eor	r27, r27
 3bc:	f0 0d       	add	r31, r0
 3be:	b1 1d       	adc	r27, r1
 3c0:	63 9f       	mul	r22, r19
 3c2:	aa 27       	eor	r26, r26
 3c4:	f0 0d       	add	r31, r0
 3c6:	b1 1d       	adc	r27, r1
 3c8:	aa 1f       	adc	r26, r26
 3ca:	64 9f       	mul	r22, r20
 3cc:	66 27       	eor	r22, r22
 3ce:	b0 0d       	add	r27, r0
 3d0:	a1 1d       	adc	r26, r1
 3d2:	66 1f       	adc	r22, r22
 3d4:	82 9f       	mul	r24, r18
 3d6:	22 27       	eor	r18, r18
 3d8:	b0 0d       	add	r27, r0
 3da:	a1 1d       	adc	r26, r1
 3dc:	62 1f       	adc	r22, r18
 3de:	73 9f       	mul	r23, r19
 3e0:	b0 0d       	add	r27, r0
 3e2:	a1 1d       	adc	r26, r1
 3e4:	62 1f       	adc	r22, r18
 3e6:	83 9f       	mul	r24, r19
 3e8:	a0 0d       	add	r26, r0
 3ea:	61 1d       	adc	r22, r1
 3ec:	22 1f       	adc	r18, r18
 3ee:	74 9f       	mul	r23, r20
 3f0:	33 27       	eor	r19, r19
 3f2:	a0 0d       	add	r26, r0
 3f4:	61 1d       	adc	r22, r1
 3f6:	23 1f       	adc	r18, r19
 3f8:	84 9f       	mul	r24, r20
 3fa:	60 0d       	add	r22, r0
 3fc:	21 1d       	adc	r18, r1
 3fe:	82 2f       	mov	r24, r18
 400:	76 2f       	mov	r23, r22
 402:	6a 2f       	mov	r22, r26
 404:	11 24       	eor	r1, r1
 406:	9f 57       	subi	r25, 0x7F	; 127
 408:	50 40       	sbci	r21, 0x00	; 0
 40a:	9a f0       	brmi	.+38     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40c:	f1 f0       	breq	.+60     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 40e:	88 23       	and	r24, r24
 410:	4a f0       	brmi	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	bb 1f       	adc	r27, r27
 418:	66 1f       	adc	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	91 50       	subi	r25, 0x01	; 1
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	a9 f7       	brne	.-22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 424:	9e 3f       	cpi	r25, 0xFE	; 254
 426:	51 05       	cpc	r21, r1
 428:	80 f0       	brcs	.+32     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42a:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_inf>
 42e:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_szero>
 432:	5f 3f       	cpi	r21, 0xFF	; 255
 434:	e4 f3       	brlt	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	98 3e       	cpi	r25, 0xE8	; 232
 438:	d4 f3       	brlt	.-12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 43a:	86 95       	lsr	r24
 43c:	77 95       	ror	r23
 43e:	67 95       	ror	r22
 440:	b7 95       	ror	r27
 442:	f7 95       	ror	r31
 444:	e7 95       	ror	r30
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	c1 f7       	brne	.-16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 44a:	fe 2b       	or	r31, r30
 44c:	88 0f       	add	r24, r24
 44e:	91 1d       	adc	r25, r1
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__fp_inf>:
 458:	97 f9       	bld	r25, 7
 45a:	9f 67       	ori	r25, 0x7F	; 127
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	08 95       	ret

00000464 <__fp_nan>:
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	08 95       	ret

0000046a <__fp_pscA>:
 46a:	00 24       	eor	r0, r0
 46c:	0a 94       	dec	r0
 46e:	16 16       	cp	r1, r22
 470:	17 06       	cpc	r1, r23
 472:	18 06       	cpc	r1, r24
 474:	09 06       	cpc	r0, r25
 476:	08 95       	ret

00000478 <__fp_pscB>:
 478:	00 24       	eor	r0, r0
 47a:	0a 94       	dec	r0
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	05 06       	cpc	r0, r21
 484:	08 95       	ret

00000486 <__fp_round>:
 486:	09 2e       	mov	r0, r25
 488:	03 94       	inc	r0
 48a:	00 0c       	add	r0, r0
 48c:	11 f4       	brne	.+4      	; 0x492 <__fp_round+0xc>
 48e:	88 23       	and	r24, r24
 490:	52 f0       	brmi	.+20     	; 0x4a6 <__fp_round+0x20>
 492:	bb 0f       	add	r27, r27
 494:	40 f4       	brcc	.+16     	; 0x4a6 <__fp_round+0x20>
 496:	bf 2b       	or	r27, r31
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0x18>
 49a:	60 ff       	sbrs	r22, 0
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__fp_round+0x20>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
