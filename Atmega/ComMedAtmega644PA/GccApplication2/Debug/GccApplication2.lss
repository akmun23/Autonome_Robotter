
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a4  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000821  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000468  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000220  00000000  00000000  00002021  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002241  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e6       	ldi	r30, 0x68	; 104
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 30       	cpi	r26, 0x05	; 5
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  b2:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <swrite>:
		
	}
}

void swrite(uint8_t byte) {
	while (!( UCSR1A & (1<<UDRE1) ));				// Venter på at der er intet i reiceveren så der er frit til at sende
  ba:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f00c8>
  be:	95 ff       	sbrs	r25, 5
  c0:	fc cf       	rjmp	.-8      	; 0xba <swrite>
	UDR1 = byte;									// Outputter dataen ud på porten
  c2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
  c6:	08 95       	ret

000000c8 <sread>:
}

uint8_t sread(){
	while (!( UCSR1A & (1<<RXC1) ));				// Venter på at alt data er læst
  c8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f00c8>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <sread>
	return UDR1;									// Returnere den data der er modtaget til en variabel
  d0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
}
  d4:	08 95       	ret

000000d6 <InitPWM>:


void InitPWM(){
		DDRD = (1 << PORTD4);									// Åbner for at der kan komme strøm ud af porten til PWM
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	8a b9       	out	0x0a, r24	; 10
		
		
		//TCCR1A = (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);	// Sætter mode til PWM, Phase Correct, 10-bit	
		TCCR1A = (1 << COM1B1) | (1 << WGM10);	// Sætter mode til PWM, Phase Correct, 8-bit
  da:	81 e2       	ldi	r24, 0x21	; 33
  dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>

		TIMSK1 = (1 << TOIE1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
		
		
		TCCR1B = (1 << CS10);									// starter timeren
  e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
  ea:	08 95       	ret

000000ec <InitADC>:
	MUX3 = 0     
	MUX2 = 0
	MUX1 = 0
	MUX0 = 1	use PC1/ADC1 for input
	*/
	ADMUX = 0b01100001;
  ec:	81 e6       	ldi	r24, 0x61	; 97
  ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
	
	ADPS2 = 1
	ADPS1 = 0    MHz clock / 8 
	ADPS0 = 1
	*/
	ADCSRA = 0b10100101;
  f2:	85 ea       	ldi	r24, 0xA5	; 165
  f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
	bit 3 = 0
	ADTS2 = 0
	ADTS1 = 0    free running mode
	ADTS0 = 0
	*/
	ADCSRB = 0b00000000;
  f8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
  fc:	08 95       	ret

000000fe <PWMStart>:
		
	
}

void PWMStart(){
  fe:	cf 93       	push	r28
	DDRD = (1 << PORTD4);
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1 << PORTD4);
 104:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00000000;				// Vender retningen på strømmen til motoren så den kører baglæns
 106:	18 b8       	out	0x08, r1	; 8
	DDRC = 0b00000000;
 108:	17 b8       	out	0x07, r1	; 7
	dutyCycle = 1023;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 ec       	ldi	r25, 0xC0	; 192
 10e:	af e7       	ldi	r26, 0x7F	; 127
 110:	b4 e4       	ldi	r27, 0x44	; 68
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 11e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	8f e5       	ldi	r24, 0x5F	; 95
 126:	94 e5       	ldi	r25, 0x54	; 84
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <PWMStart+0x2a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <PWMStart+0x34>
 132:	00 00       	nop
	_delay_ms(150);
	bool ObjectHit = false;
 134:	c0 e0       	ldi	r28, 0x00	; 0
	while (!(ObjectHit)) {			// Laver en evigt loop der venter på at strømmen bliver for stor også slutter den
 136:	12 c0       	rjmp	.+36     	; 0x15c <PWMStart+0x5e>
		ADCSRA |= (1 << ADSC);		// start ADC
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24
		while ((ADCSRA & (1 << ADIF)) == 0){}
 142:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
 146:	84 ff       	sbrs	r24, 4
 148:	fc cf       	rjmp	.-8      	; 0x142 <PWMStart+0x44>
		if(ADCH <= 115){
 14a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 14e:	84 37       	cpi	r24, 0x74	; 116
 150:	28 f4       	brcc	.+10     	; 0x15c <PWMStart+0x5e>
			swrite(ADCH);
 152:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 156:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
			ObjectHit = true;
 15a:	c1 e0       	ldi	r28, 0x01	; 1
	PORTC = 0b00000000;				// Vender retningen på strømmen til motoren så den kører baglæns
	DDRC = 0b00000000;
	dutyCycle = 1023;
	_delay_ms(150);
	bool ObjectHit = false;
	while (!(ObjectHit)) {			// Laver en evigt loop der venter på at strømmen bliver for stor også slutter den
 15c:	cc 23       	and	r28, r28
 15e:	61 f3       	breq	.-40     	; 0x138 <PWMStart+0x3a>
			swrite(ADCH);
			ObjectHit = true;
		}

	}
	dutyCycle = 0;
 160:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	swrite('7');
 170:	87 e3       	ldi	r24, 0x37	; 55
 172:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
	stopcommand[0] = sread(); // Venter på at den får sendt signal af robot der siger den er hvor der skal slippes
 176:	0e 94 64 00 	call	0xc8	; 0xc8 <sread>
 17a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	
	PORTC = 0b00001000;				// Vender retningen på strømmen til motoren så den kører baglæns
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	88 b9       	out	0x08, r24	; 8
	DDRC = 0b00001000;
 182:	87 b9       	out	0x07, r24	; 7
	dutyCycle = 1023;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 ec       	ldi	r25, 0xC0	; 192
 188:	af e7       	ldi	r26, 0x7F	; 127
 18a:	b4 e4       	ldi	r27, 0x44	; 68
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 198:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	8f e5       	ldi	r24, 0x5F	; 95
 1a0:	94 e5       	ldi	r25, 0x54	; 84
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <PWMStart+0xa4>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <PWMStart+0xae>
 1ac:	00 00       	nop
	_delay_ms(150);	
	ObjectHit = false;				
 1ae:	90 e0       	ldi	r25, 0x00	; 0
	while (!(ObjectHit)) {			// Laver en evigt loop der venter på at strømmen bliver for stor også slutter den
 1b0:	12 c0       	rjmp	.+36     	; 0x1d6 <PWMStart+0xd8>
		ADCSRA |= (1 << ADSC);		// start ADC
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
		while ((ADCSRA & (1 << ADIF)) == 0){}
 1bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
 1c0:	84 ff       	sbrs	r24, 4
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <PWMStart+0xbe>
		if(ADCH >= 144){
 1c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 1c8:	80 39       	cpi	r24, 0x90	; 144
 1ca:	28 f0       	brcs	.+10     	; 0x1d6 <PWMStart+0xd8>
			swrite(ADCH);
 1cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 1d0:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
			ObjectHit = true;
 1d4:	9c 2f       	mov	r25, r28
	PORTC = 0b00001000;				// Vender retningen på strømmen til motoren så den kører baglæns
	DDRC = 0b00001000;
	dutyCycle = 1023;
	_delay_ms(150);	
	ObjectHit = false;				
	while (!(ObjectHit)) {			// Laver en evigt loop der venter på at strømmen bliver for stor også slutter den
 1d6:	99 23       	and	r25, r25
 1d8:	61 f3       	breq	.-40     	; 0x1b2 <PWMStart+0xb4>
			swrite(ADCH);
			ObjectHit = true;
		}

	}
	ADCSRA = 0b10100101;
 1da:	85 ea       	ldi	r24, 0xA5	; 165
 1dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
	DDRD = 0b00000000;
 1e0:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00000000;
 1e2:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0b00000000;				// Vender retningen til den anden vej igen og slukker motoren
 1e4:	18 b8       	out	0x08, r1	; 8
	DDRC = 0b00000000;
 1e6:	17 b8       	out	0x07, r1	; 7
	swrite('7');
 1e8:	87 e3       	ldi	r24, 0x37	; 55
 1ea:	0e 94 5d 00 	call	0xba	; 0xba <swrite>

	
}
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <main>:
//Sætter variabler
double dutyCycle = 1023;
char stopcommand[1];
int main(void)
{
	sei();	
 1f2:	78 94       	sei
	
	UBRR1 = F_CPU/(16*96000)-1;
 1f4:	87 e7       	ldi	r24, 0x77	; 119
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 1fc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);	// Tænder for reading og writing
 200:	88 e1       	ldi	r24, 0x18	; 24
 202:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    InitPWM();
 206:	0e 94 6b 00 	call	0xd6	; 0xd6 <InitPWM>
	InitADC();
 20a:	0e 94 76 00 	call	0xec	; 0xec <InitADC>
	DDRD = 0x00;
 20e:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
 210:	1b b8       	out	0x0b, r1	; 11

	while (1) {
		
		
		char ReceivedMessage[1];
		ReceivedMessage[0] = sread();		// Venter hele tiden på signal fra pc medmindre anden operation i koden er igang
 212:	0e 94 64 00 	call	0xc8	; 0xc8 <sread>
 216:	c8 2f       	mov	r28, r24
		
		if (ReceivedMessage[0] == '2')
 218:	82 33       	cpi	r24, 0x32	; 50
 21a:	71 f4       	brne	.+28     	; 0x238 <main+0x46>
		{
			dutyCycle = 1023;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 ec       	ldi	r25, 0xC0	; 192
 220:	af e7       	ldi	r26, 0x7F	; 127
 222:	b4 e4       	ldi	r27, 0x44	; 68
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 230:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			DDRD = (1 << PORTD4);
 234:	80 e1       	ldi	r24, 0x10	; 16
 236:	8a b9       	out	0x0a, r24	; 10
		}
		
		if (ReceivedMessage[0] == '3')
 238:	c3 33       	cpi	r28, 0x33	; 51
 23a:	09 f4       	brne	.+2      	; 0x23e <main+0x4c>
		{
			DDRD = (0 << PORTD4);
 23c:	1a b8       	out	0x0a, r1	; 10
		}
		
		if (ReceivedMessage[0] == '6')
 23e:	dc 2f       	mov	r29, r28
 240:	c6 33       	cpi	r28, 0x36	; 54
 242:	11 f4       	brne	.+4      	; 0x248 <main+0x56>
		{
			PWMStart();
 244:	0e 94 7f 00 	call	0xfe	; 0xfe <PWMStart>
		}
		if (ReceivedMessage[0] == '8')
 248:	d8 33       	cpi	r29, 0x38	; 56
 24a:	19 f7       	brne	.-58     	; 0x212 <main+0x20>
		{
			swrite(ReceivedMessage[0]);
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 5d 00 	call	0xba	; 0xba <swrite>
		}
		
		
		
	}
 252:	df cf       	rjmp	.-66     	; 0x212 <main+0x20>

00000254 <__vector_15>:
	swrite('7');

	
}

ISR(TIMER1_OVF_vect){
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	
	OCR1B = dutyCycle;				// Styrer hvor hurtigt den skal interupt alt efter hvor høj dutycyle er
 276:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 282:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 286:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__fixunssfsi>
 28a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f008b>
 28e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f008a>

}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__fixunssfsi>:
 2b4:	0e 94 91 01 	call	0x322	; 0x322 <__fp_splitA>
 2b8:	88 f0       	brcs	.+34     	; 0x2dc <__fixunssfsi+0x28>
 2ba:	9f 57       	subi	r25, 0x7F	; 127
 2bc:	98 f0       	brcs	.+38     	; 0x2e4 <__fixunssfsi+0x30>
 2be:	b9 2f       	mov	r27, r25
 2c0:	99 27       	eor	r25, r25
 2c2:	b7 51       	subi	r27, 0x17	; 23
 2c4:	b0 f0       	brcs	.+44     	; 0x2f2 <__fixunssfsi+0x3e>
 2c6:	e1 f0       	breq	.+56     	; 0x300 <__fixunssfsi+0x4c>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	88 1f       	adc	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	1a f0       	brmi	.+6      	; 0x2d8 <__fixunssfsi+0x24>
 2d2:	ba 95       	dec	r27
 2d4:	c9 f7       	brne	.-14     	; 0x2c8 <__fixunssfsi+0x14>
 2d6:	14 c0       	rjmp	.+40     	; 0x300 <__fixunssfsi+0x4c>
 2d8:	b1 30       	cpi	r27, 0x01	; 1
 2da:	91 f0       	breq	.+36     	; 0x300 <__fixunssfsi+0x4c>
 2dc:	0e 94 ab 01 	call	0x356	; 0x356 <__fp_zero>
 2e0:	b1 e0       	ldi	r27, 0x01	; 1
 2e2:	08 95       	ret
 2e4:	0c 94 ab 01 	jmp	0x356	; 0x356 <__fp_zero>
 2e8:	67 2f       	mov	r22, r23
 2ea:	78 2f       	mov	r23, r24
 2ec:	88 27       	eor	r24, r24
 2ee:	b8 5f       	subi	r27, 0xF8	; 248
 2f0:	39 f0       	breq	.+14     	; 0x300 <__fixunssfsi+0x4c>
 2f2:	b9 3f       	cpi	r27, 0xF9	; 249
 2f4:	cc f3       	brlt	.-14     	; 0x2e8 <__fixunssfsi+0x34>
 2f6:	86 95       	lsr	r24
 2f8:	77 95       	ror	r23
 2fa:	67 95       	ror	r22
 2fc:	b3 95       	inc	r27
 2fe:	d9 f7       	brne	.-10     	; 0x2f6 <__fixunssfsi+0x42>
 300:	3e f4       	brtc	.+14     	; 0x310 <__fixunssfsi+0x5c>
 302:	90 95       	com	r25
 304:	80 95       	com	r24
 306:	70 95       	com	r23
 308:	61 95       	neg	r22
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	8f 4f       	sbci	r24, 0xFF	; 255
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	08 95       	ret

00000312 <__fp_split3>:
 312:	57 fd       	sbrc	r21, 7
 314:	90 58       	subi	r25, 0x80	; 128
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	59 f0       	breq	.+22     	; 0x332 <__fp_splitA+0x10>
 31c:	5f 3f       	cpi	r21, 0xFF	; 255
 31e:	71 f0       	breq	.+28     	; 0x33c <__fp_splitA+0x1a>
 320:	47 95       	ror	r20

00000322 <__fp_splitA>:
 322:	88 0f       	add	r24, r24
 324:	97 fb       	bst	r25, 7
 326:	99 1f       	adc	r25, r25
 328:	61 f0       	breq	.+24     	; 0x342 <__fp_splitA+0x20>
 32a:	9f 3f       	cpi	r25, 0xFF	; 255
 32c:	79 f0       	breq	.+30     	; 0x34c <__fp_splitA+0x2a>
 32e:	87 95       	ror	r24
 330:	08 95       	ret
 332:	12 16       	cp	r1, r18
 334:	13 06       	cpc	r1, r19
 336:	14 06       	cpc	r1, r20
 338:	55 1f       	adc	r21, r21
 33a:	f2 cf       	rjmp	.-28     	; 0x320 <__fp_split3+0xe>
 33c:	46 95       	lsr	r20
 33e:	f1 df       	rcall	.-30     	; 0x322 <__fp_splitA>
 340:	08 c0       	rjmp	.+16     	; 0x352 <__fp_splitA+0x30>
 342:	16 16       	cp	r1, r22
 344:	17 06       	cpc	r1, r23
 346:	18 06       	cpc	r1, r24
 348:	99 1f       	adc	r25, r25
 34a:	f1 cf       	rjmp	.-30     	; 0x32e <__fp_splitA+0xc>
 34c:	86 95       	lsr	r24
 34e:	71 05       	cpc	r23, r1
 350:	61 05       	cpc	r22, r1
 352:	08 94       	sec
 354:	08 95       	ret

00000356 <__fp_zero>:
 356:	e8 94       	clt

00000358 <__fp_szero>:
 358:	bb 27       	eor	r27, r27
 35a:	66 27       	eor	r22, r22
 35c:	77 27       	eor	r23, r23
 35e:	cb 01       	movw	r24, r22
 360:	97 f9       	bld	r25, 7
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
